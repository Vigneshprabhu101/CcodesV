C Code:

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <limits.h>
 
#define pcx putchar_unlocked
#define gcx getchar_unlocked
 
typedef int32_t    ichar; // for ctype functions
typedef int_fast64_t    fint;  // fast int on 64bit word machines
 
static inline fint getfi ()
{
    ichar c = gcx();
    while (!isdigit (c)) c = gcx();
    fint n = 0;
    while (isdigit (c)) {
        n = n * 10 + c - '0';
        c = gcx();
    }
    return n;
}
static inline void putfi (fint n, char lc)
{
	if (0 == n) {
		pcx('0'); if(lc) pcx(lc); return;
	}
	char s[24]; fint rdi =0;
	while (n) {
		s[rdi++] = '0' + n % 10;
		n /= 10;
	}
	while (rdi) pcx(s[--rdi]);
	if(lc) pcx(lc);
}
typedef struct {
    int num;
    int idx;
} num_t;
int cmp(const void *p, const void *q) { //x & y are int (4 bytes each)
    if (((num_t*)p)->num == ((num_t*)q)->num)
        return (((num_t*)p)->idx > ((num_t*)q)->idx);
    else
        return (((num_t*)p)->num > ((num_t*)q)->num);
}
 
int main () {
    num_t* NA = malloc (200001 * sizeof(num_t));
	fint T = getfi() +1;
	while(--T) {
        fint N = getfi() +1;
        NA[0].num = INT_MAX;
        NA[0].idx = 0;
        for (fint ni=1; ni<N;) {
            NA[ni].idx = ni;
            NA[ni++].num = (int)getfi();
        }
        qsort(NA, N, sizeof(num_t), cmp);
        fint ans = 0;
        for (fint ai=0, zi=1; zi<N; ++zi) {
            if (NA[ai].num != NA[zi].num) {
                ans += NA[zi-1].idx - NA[ai].idx;
                ai = zi;
            }
        }
        putfi(ans, '\n');
	}
	return 0;
}